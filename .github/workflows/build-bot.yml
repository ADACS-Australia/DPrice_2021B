name: build-bot

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ build-bot ]
  pull_request:
    branches: [ master ]

env:
  OMP_STACKSIZE: 512M
  SPLASH_DIR: ${{ github.workspace }}/splash
  PHANTOM_DIR: ${{ github.workspace }}
  WEB_USER: ec2-user
  WEB_SERVER: data.phantom.cloud.edu.au
  WEB_HTML_DIR: /var/www/html/
  BUILD_LOG_DIR: /ci/build/logs/

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        system:
          - ['self-hosted', 'ifort']
          - ['ubuntu-latest', 'gfortran']

    runs-on: ${{ matrix.system[0] }}

    steps:

    - name: "Nuke the github workspace before doing anything"
      run: rm -r ${{ github.workspace }} && mkdir ${{ github.workspace }}

    - name: "Clone phantom"
      uses: actions/checkout@v2

    - name: "Grab a copy of splash source code"
      uses: actions/checkout@v2
      with:
        repository: danieljprice/splash
        path: splash

    - name: "Install SSH Key"
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.RUNNER_PRIVATE_KEY }}
        known_hosts: |
          ${{ secrets.WEBSERVER_KNOWN_HOST }}
        if_key_exists: "replace"

    - name: "Create logs directory"
      run: mkdir logs

    - name: "Grab previous build logs from web server"
      working-directory: logs
      run: rsync -vau ${WEB_USER}@${WEB_SERVER}:${WEB_HTML_DIR}${BUILD_LOG_DIR}/*${{ matrix.system[1] }}.txt . || true

    - name: "Run buildbot.sh"
      run: ./buildbot.sh 17000000 http://${WEB_SEVER}${BUILD_LOG_DIR}
      working-directory: scripts
      env:
        SYSTEM: ${{ matrix.system[1] }}
        RETURN_ERR: yes

    - name: "Copy new build logs to web server"
      run: rsync -vau logs ${WEB_SERVER}:${BUILD_LOG_DIR}

    - name: logs/build-failures-${{ matrix.system[1] }}.txt
      if: always()
      run: cat logs/build-failures-${{ matrix.system[1] }}.txt || true

    - name: logs/setup-failures-${{ matrix.system[1] }}.txt
      if: always()
      run: cat logs/setup-failures-${{ matrix.system[1] }}.txt || true

    - name: logs/make-*-${{ matrix.system[1] }}.txt
      if: always()
      run: |
        echo
        for item in $(ls logs/make-*-${{ matrix.system[1] }}.txt); do
          echo ::group::"${item}"
          cat $item
          echo ::endgroup::
        done
